// Center block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
    width: map-get($columns, $numberColumns) -
        (($columns__margin * ($numberColumns - 1)) / $numberColumns);
}

// responsive breakpoints
@mixin breakpoint($breakpoint: md, $key: min, $orientation: false) {
    @if ($orientation) {
        @media (#{$key}-width: map-get($breakpoints, $breakpoint)) and (orientation : $orientation) {
            @content;
        }
    } @else {
        @media (#{$key}-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }
}

// include from fonts
@mixin font-face(
    $name,
    $path,
    $weight: null,
    $style: null,
    $exts: eot woff2 woff ttf svg,
    $display: 'swap'
) {
    $src: null;

    $extmods: (
        eot: '?',
        svg: '#' + str-replace($name, ' ', '_')
    );

    $formats: (
        otf: 'opentype',
        ttf: 'truetype'
    );

    @each $ext in $exts {
        $extmod: if(
            map-has-key($extmods, $ext),
            $ext + map-get($extmods, $ext),
            $ext
        );
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append(
            $src,
            url(quote($path + '.' + $extmod)) format(quote($format)),
            comma
        );
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        font-display: $display;
        src: $src;
    }
}

@mixin border($side: 'all', $color-id: false) {
    $border-color: var(--border-color);
    // Assign new CSS var if needed
    @if ($color-id) {
        $border-color: var($color-id);
    }

    @if ($side == 'all') {
        border: $border-width $border-style $border-color;
    } @else {
        border-#{$side}: $border-width $border-style $border-color;
    }
}
