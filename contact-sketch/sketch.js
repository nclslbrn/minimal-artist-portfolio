let ptInPolygon,polygon=[],cntrSktch=[],cntrPl=[],searchParams=new URLSearchParams(window.location.search);const sketchProps={w:searchParams.get("w"),h:searchParams.get("h"),background:"#"+searchParams.get("c1").replace(" ",""),stroke:"#"+searchParams.get("c2").replace(" ","")};function areCollinding(n,t,r,e){var o,$,_;return 0!=(o=(t[0]-n[0])*(e[1]-r[1])-(e[0]-r[0])*(t[1]-n[1]))&&(_=((e[1]-r[1])*(e[0]-n[0])+(r[0]-e[0])*(e[1]-n[1]))/o,$=((n[1]-t[1])*(e[0]-n[0])+(t[0]-n[0])*(e[1]-n[1]))/o,0<_&&_<1&&0<$&&$<1)}function getLineLineCollision(n,t,r,e){if(!areCollinding(n,t,r,e))return!1;let o=((e[0]-r[0])*(n[1]-r[1])-(e[1]-r[1])*(n[0]-r[0]))/((e[1]-r[1])*(t[0]-n[0])-(e[0]-r[0])*(t[1]-n[1]));t[0],n[0],n[1],r[1],t[1],n[1],n[0],r[0],e[1],r[1],t[0],n[0],e[0],r[0],t[1],n[1];let $=n[0]+o*(t[0]-n[0]),_=n[1]+o*(t[1]-n[1]);return[$,_]}function getCentroid(n){let t=0,r=0,e=0,o=n.length;for(let $=0;$<o;$++){let _=$===o-1?0:$+1,l=n[$],c=n[_],a=l[0]*c[1]-c[0]*l[1];t+=a,r+=(l[0]+c[0])*a,e+=(l[1]+c[1])*a}let s=3*t;return[r/s,e/s]}function order(n,t=!0){let r=n.map(n=>({x:n[0],y:n[1],angle:Math.atan2(n[1]-cntrPl[1],n[0]-cntrPl[0])})),e=r.sort((n,t)=>n.angle-t.angle);return t||e.reverse(),e.map(n=>[n.x,n.y])}function schrinkPoly(n,t=12){let r=[];for(let e=0;e<n.length;e++){let o=n[e],$=n[(e+1)%n.length],_=n[(e+2)%n.length],l=sqrt(pow($[0]-o[0],2)+pow($[1]-o[1],2)),c=sqrt(pow($[0]-_[0],2)+pow($[1]-_[1],2)),a=sqrt(pow(_[0]-o[0],2)+pow(_[1]-o[1],2)),s=acos((c*c+l*l-a*a)/(2*c*l)),g=-t/sin(s/2),h=atan2($[1]-cntrPl[1],$[0]-cntrPl[0]),P=sqrt(($[0]-cntrPl[0])**2+($[1]-cntrPl[1])**2);if(g<=-P)return!1;r.push([$[0]+cos(h)*g,$[1]+sin(h)*g])}return r}function setup(){createCanvas(sketchProps.w,sketchProps.h),ptInPolygon=round(random(12,48)),cntrSktch=[width/2,height/2];let n=random()*PI*(2/ptInPolygon);for(let t=0;t<ptInPolygon;t++){let r=random(.75*Math.min(...cntrSktch),.9*Math.max(...cntrSktch));polygon.push([cntrSktch[0]+cos(n)*r,cntrSktch[1]+sin(n)*r]),n+=random(PI,1.5*TWO_PI)*(1/ptInPolygon)}cntrPl=getCentroid(polygon),polygon=order(polygon),background(sketchProps.background),noFill(),stroke(sketchProps.stroke),beginShape(),polygon.forEach(n=>vertex(...n)),endShape(CLOSE),polygon.forEach(n=>ellipse(...n,4)),textSize(16),text(`Polygon vertices : ${ptInPolygon}`,20,height-20),ellipse(cntrPl[0],cntrPl[1],4);let e=schrinkPoly(polygon);for(;e;)beginShape(),e.forEach(n=>vertex(...n)),endShape(CLOSE),e=schrinkPoly(e)}